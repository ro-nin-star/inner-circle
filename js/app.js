// F≈ë alkalmaz√°s inicializ√°l√≥ √©s koordin√°tor - INTEGR√ÅCI√ìS VERZI√ì
// Csak a sz√ºks√©ges √∂sszek√∂t≈ë funkci√≥kat tartalmazza

// BIZTONS√ÅGOS SCORE ADAT K√âSZ√çT≈ê F√úGGV√âNY - JAV√çTOTT VERZI√ì
if (!window.createSafeScoreData) {
    window.createSafeScoreData = (playerName, score, difficulty, transformation) => {
        console.log('üõ°Ô∏è === SCORE ADAT K√âSZ√çT√âS KEZD√âS ===');
        console.log('RAW INPUT:', { playerName, score, difficulty, transformation });
        
        // ‚úÖ L√âP√âSENK√âNTI BIZTONS√ÅGOS KONVERT√ÅL√ÅS
        
        // 1. J√ÅT√âKOS N√âV
        let safePlayerName;
        try {
            safePlayerName = String(playerName || 'N√©vtelen').trim();
            if (safePlayerName.length === 0) {
                safePlayerName = 'N√©vtelen';
            }
            console.log('‚úÖ J√°t√©kos n√©v OK:', safePlayerName);
        } catch (error) {
            console.error('‚ùå J√°t√©kos n√©v hiba:', error);
            safePlayerName = 'N√©vtelen';
        }
        
        // 2. PONTSZ√ÅM - EXTRA GONDOS KEZEL√âS
        let safeScore;
        try {
            console.log('üî¢ Score feldolgoz√°s - eredeti √©rt√©k:', score, typeof score);
            
            const numScore = Number(score);
            console.log('üî¢ Number() eredm√©ny:', numScore, typeof numScore);
            
            if (isNaN(numScore)) {
                console.error('‚ùå Score NaN lett:', score, '->', numScore);
                throw new Error(`Score nem konvert√°lhat√≥ sz√°mm√°: ${score}`);
            }
            
            safeScore = Math.round(numScore);
            console.log('üî¢ Kerek√≠tett score:', safeScore);
            
            if (safeScore < 0) {
                console.warn('‚ö†Ô∏è Negat√≠v score, 0-ra √°ll√≠tva:', safeScore);
                safeScore = 0;
            } else if (safeScore > 100) {
                console.warn('‚ö†Ô∏è 100 feletti score, 100-ra √°ll√≠tva:', safeScore);
                safeScore = 100;
            }
            
            console.log('‚úÖ V√©gs≈ë score:', safeScore, typeof safeScore);
            
        } catch (error) {
            console.error('‚ùå Score feldolgoz√°si hiba:', error);
            throw new Error(`Score feldolgoz√°si hiba: ${error.message} (eredeti: ${score})`);
        }
        
        // 3. NEH√âZS√âG
        let safeDifficulty;
        try {
            safeDifficulty = String(difficulty || 'easy').toLowerCase().trim();
            if (!['easy', 'hard'].includes(safeDifficulty)) {
                console.warn('‚ö†Ô∏è Ismeretlen neh√©zs√©g:', safeDifficulty, '-> easy');
                safeDifficulty = 'easy';
            }
            console.log('‚úÖ Neh√©zs√©g OK:', safeDifficulty);
        } catch (error) {
            console.error('‚ùå Neh√©zs√©g hiba:', error);
            safeDifficulty = 'easy';
        }
        
        // 4. TRANSZFORM√ÅCI√ì
        let safeTransformation;
        try {
            safeTransformation = String(transformation || '').trim();
            console.log('‚úÖ Transzform√°ci√≥ OK:', safeTransformation);
        } catch (error) {
            console.error('‚ùå Transzform√°ci√≥ hiba:', error);
            safeTransformation = '';
        }
        
        // 5. ID≈êB√âLYEGEK
        const currentTime = Date.now();
        const currentISO = new Date().toISOString();
        
        // 6. V√âGS≈ê OBJEKTUM √ñSSZE√ÅLL√çT√ÅS
        const scoreData = {
            playerName: safePlayerName,
            score: safeScore,
            difficulty: safeDifficulty,
            transformation: safeTransformation,
            timestamp: currentTime,
            created: currentISO
        };
        
        console.log('üìã √ñSSZE√ÅLL√çTOTT OBJEKTUM:', scoreData);
        
        // 7. V√âGS≈ê VALID√ÅL√ÅS
        Object.keys(scoreData).forEach(key => {
            const value = scoreData[key];
            
            if (value === undefined) {
                throw new Error(`UNDEFINED √©rt√©k a ${key} mez≈ëben`);
            }
            
            if (value === null) {
                throw new Error(`NULL √©rt√©k a ${key} mez≈ëben`);
            }
            
            if (key === 'score' || key === 'timestamp') {
                if (typeof value !== 'number' || isNaN(value)) {
                    throw new Error(`${key} nem √©rv√©nyes sz√°m: ${value}`);
                }
            }
        });
        
        console.log('üéâ V√âGS≈ê BIZTONS√ÅGOS ADAT:', JSON.stringify(scoreData, null, 2));
        return scoreData;
    };
    console.log('‚úÖ createSafeScoreData l√©trehozva');
}

// PerfectCircleApp oszt√°ly - INTEGR√ÅCI√ì F√ìKUSZ√ö VERZI√ì
class PerfectCircleApp {
    constructor() {
        this.initialized = false;
        this.playerName = '';
        this.currentLanguage = 'en';
        this.initAttempts = 0;
        this.maxInitAttempts = 10;
        this.leaderboardManager = null;
    }

    async init() {
        if (this.initialized) {
            console.warn('Alkalmaz√°s m√°r inicializ√°lva');
            return;
        }

        console.log('üéÆ Perfect Circle alkalmaz√°s inicializ√°l√°sa...');

        try {
            await this.waitForI18nManager();

            if (window.i18nManager && typeof window.i18nManager.init === 'function') {
                await window.i18nManager.init();
                this.currentLanguage = window.i18nManager.getCurrentLanguage();
                console.log(`‚úÖ I18n inicializ√°lva - Nyelv: ${this.currentLanguage}`);
            } else {
                console.warn('‚ö†Ô∏è I18n Manager nem el√©rhet≈ë - folytat√°s alap√©rtelmezett sz√∂vegekkel');
                this.currentLanguage = 'hu';
            }

            if (window.i18nManager) {
                window.addEventListener('languageChanged', (e) => {
                    this.onLanguageChanged(e.detail);
                });
            }

            this.loadPlayerName();
            this.updateStats();

            if (window.VisitorCounter && typeof window.VisitorCounter.init === 'function') {
                await window.VisitorCounter.init();
            } else {
                console.warn('‚ö†Ô∏è VisitorCounter nem el√©rhet≈ë');
            }

            // ‚úÖ MEGL√âV≈ê LEADERBOARD MANAGER KERES√âSE
            await this.initializeLeaderboardManager();
            this.setupEventListeners();
            this.initializeUI();
            this.loadTheme();

            this.initialized = true;
            console.log('‚úÖ Perfect Circle alkalmaz√°s sikeresen inicializ√°lva');

        } catch (error) {
            console.error('‚ùå Alkalmaz√°s inicializ√°l√°si hiba:', error);
            this.initializeFallback();
        }
    }

    async waitForI18nManager() {
        return new Promise((resolve) => {
            const checkI18n = () => {
                this.initAttempts++;

                if (window.i18nManager && typeof window.i18nManager.init === 'function') {
                    console.log(`‚úÖ I18n Manager megtal√°lva ${this.initAttempts}. k√≠s√©rlettel`);
                    resolve();
                } else if (this.initAttempts >= this.maxInitAttempts) {
                    console.warn(`‚ö†Ô∏è I18n Manager nem tal√°lhat√≥ ${this.maxInitAttempts} k√≠s√©rlet ut√°n`);
                    resolve();
                } else {
                    console.log(`üîÑ I18n Manager v√°rakoz√°s... (${this.initAttempts}/${this.maxInitAttempts})`);
                    setTimeout(checkI18n, 100);
                }
            };

            checkI18n();
        });
    }

    // ‚úÖ MEGL√âV≈ê LEADERBOARD MANAGER INTEGR√ÅL√ÅSA
    async initializeLeaderboardManager() {
        console.log('üèÜ LeaderboardManager keres√©se √©s inicializ√°l√°sa...');
        
        try {
            // 1. Keress√ºk a megl√©v≈ë LeaderboardManager-t
            if (window.LeaderboardManager) {
                console.log('‚úÖ Megl√©v≈ë LeaderboardManager oszt√°ly megtal√°lva');
                this.leaderboardManager = new window.LeaderboardManager();
            } 
            // 2. Vagy keress√ºk a glob√°lis p√©ld√°nyt
            else if (window.leaderboardManager) {
                console.log('‚úÖ Megl√©v≈ë leaderboardManager p√©ld√°ny megtal√°lva');
                this.leaderboardManager = window.leaderboardManager;
            }
            // 3. Vagy keress√ºk m√°s n√©ven
            else if (window.globalLeaderboardManager) {
                console.log('‚úÖ Glob√°lis leaderboardManager megtal√°lva');
                this.leaderboardManager = window.globalLeaderboardManager;
            }
            
            if (this.leaderboardManager) {
                console.log('‚úÖ LeaderboardManager sikeresen csatlakoztatva');
                
                // Pr√≥b√°ljuk bet√∂lteni a helyi ranglist√°t
                if (typeof this.leaderboardManager.loadLocalLeaderboard === 'function') {
                    this.leaderboardManager.loadLocalLeaderboard();
                    console.log('‚úÖ Helyi ranglista bet√∂ltve');
                } else if (typeof this.leaderboardManager.refreshLocalLeaderboard === 'function') {
                    this.leaderboardManager.refreshLocalLeaderboard();
                    console.log('‚úÖ Helyi ranglista friss√≠tve');
                }
            } else {
                console.warn('‚ö†Ô∏è Nincs el√©rhet≈ë LeaderboardManager - fallback haszn√°lata');
                this.displayFallbackLeaderboard();
            }
            
        } catch (error) {
            console.error('‚ùå LeaderboardManager inicializ√°l√°si hiba:', error);
            this.leaderboardManager = null;
            this.displayFallbackLeaderboard();
        }
    }

    displayFallbackLeaderboard() {
        console.log('üîÑ Fallback ranglista megjelen√≠t√©s...');
        
        const listContainer = document.getElementById('leaderboardList');
        const statusContainer = document.getElementById('leaderboardStatus');
        
        if (statusContainer) {
            statusContainer.textContent = 'üì± Helyi eredm√©nyek';
        }
        
        if (listContainer) {
            if (window.ScoreManager) {
                try {
                    const scores = window.ScoreManager.getScores();
                    console.log('üìä Bet√∂lt√∂tt eredm√©nyek:', scores);
                    
                    if (scores.length === 0) {
                        listContainer.innerHTML = `
                            <div class="score-entry">
                                <span>M√©g nincsenek eredm√©nyek</span>
                            </div>
                        `;
                    } else {
                        listContainer.innerHTML = scores.map((score, index) => {
                            const playerName = score.playerName || this.getPlayerName();
                            const dateStr = score.date || 
                                           (score.timestamp ? new Date(score.timestamp).toLocaleDateString('hu-HU') : 'Ismeretlen');
                            
                            return `
                                <div class="score-entry" data-score-id="${score.id}">
                                    <span class="rank">#${index + 1}</span>
                                    <span class="name">${playerName}</span>
                                    <span class="score">${score.score}</span>
                                    <span class="date">${dateStr}</span>
                                </div>
                            `;
                        }).join('');
                    }
                    
                } catch (error) {
                    console.error('‚ùå Fallback ranglista hiba:', error);
                    listContainer.innerHTML = `
                        <div class="score-entry error">
                            <span style="color: #ff6b6b;">‚ùå Hiba az eredm√©nyek bet√∂lt√©sekor</span>
                        </div>
                    `;
                }
            } else {
                listContainer.innerHTML = `
                    <div class="score-entry">
                        <span>M√©g nincsenek eredm√©nyek</span>
                    </div>
                `;
            }
        }
    }

    // Nyelvi funkci√≥k
    t(key, params = {}) {
        if (window.i18nManager && typeof window.i18nManager.t === 'function') {
            return window.i18nManager.t(key, params);
        }

        const fallbackTexts = {
            'player.anonymous': 'N√©vtelen',
            'leaderboard.noResults': 'M√©g nincsenek eredm√©nyek',
            // ... tov√°bbi fallback sz√∂vegek
        };

        let text = fallbackTexts[key] || key;
        Object.keys(params).forEach(param => {
            text = text.replace(`{${param}}`, params[param]);
        });
        return text;
    }

    onLanguageChanged(detail) {
        if (!detail) return;
        console.log(`üåç Language changed to: ${detail.language}`);
        this.currentLanguage = detail.language;
        this.updateStats();
        
        // Friss√≠ts√ºk a ranglist√°t ha van
        if (this.leaderboardManager) {
            const currentView = this.leaderboardManager.getCurrentView ? 
                               this.leaderboardManager.getCurrentView() : 'local';
            if (currentView === 'local') {
                if (typeof this.leaderboardManager.loadLocalLeaderboard === 'function') {
                    this.leaderboardManager.loadLocalLeaderboard();
                }
            }
        }
    }

    // Alapvet≈ë funkci√≥k
    setupEventListeners() {
        document.addEventListener('keydown', (e) => {
            this.handleKeyboardShortcuts(e);
        });

        window.addEventListener('beforeunload', (e) => {
            if (window.gameEngine && window.gameEngine.gameActive) {
                e.preventDefault();
                const message = 'Biztosan el szeretn√©d hagyni az oldalt? A folyamatban l√©v≈ë j√°t√©k elv√©sz.';
                e.returnValue = message;
                return e.returnValue;
            }
        });
    }

    handleKeyboardShortcuts(e) {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key.toLowerCase()) {
                case 'r':
                    e.preventDefault();
                    if (window.gameEngine) {
                        window.gameEngine.clearCanvas();
                    }
                    break;
                case 's':
                    e.preventDefault();
                    if (window.gameEngine && !window.gameEngine.gameActive) {
                        window.gameEngine.startDrawing();
                    }
                    break;
                case 'h':
                    e.preventDefault();
                    this.showInstructions();
                    break;
            }
        }

        if (e.key === 'Escape') {
            if (window.gameEngine && window.gameEngine.gameActive) {
                window.gameEngine.clearCanvas();
            }
        }
    }

    initializeUI() {
        this.addAudioToggleButton();
        this.addThemeToggleButton();
        this.addAdvancedFeaturesButton();
    }

    addAudioToggleButton() {
        const controls = document.querySelector('.controls');
        if (controls && !document.getElementById('audioToggleBtn')) {
            const audioBtn = document.createElement('button');
            audioBtn.id = 'audioToggleBtn';
            audioBtn.innerHTML = 'üîä Hang';
            audioBtn.onclick = this.toggleAudio.bind(this);
            controls.appendChild(audioBtn);
        }
    }

    addThemeToggleButton() {
        const controls = document.querySelector('.controls');
        if (controls && !document.getElementById('themeToggleBtn')) {
            const themeBtn = document.createElement('button');
            themeBtn.id = 'themeToggleBtn';
            themeBtn.innerHTML = 'üåô S√∂t√©t';
            themeBtn.onclick = this.toggleTheme.bind(this);
            controls.appendChild(themeBtn);
        }
    }

    addAdvancedFeaturesButton() {
        const controls = document.querySelector('.controls');
        if (controls && !document.getElementById('advancedBtn')) {
            const advancedBtn = document.createElement('button');
            advancedBtn.id = 'advancedBtn';
            advancedBtn.innerHTML = '‚öôÔ∏è Fejlett';
            advancedBtn.onclick = this.showAdvancedFeatures.bind(this);
            controls.appendChild(advancedBtn);
        }
    }

    toggleAudio() {
        if (window.AudioManager) {
            const isEnabled = window.AudioManager.isEnabled();
            window.AudioManager.setEnabled(!isEnabled);
            const audioBtn = document.getElementById('audioToggleBtn');
            if (audioBtn) {
                audioBtn.innerHTML = isEnabled ? 'üîá Hang Ki' : 'üîä Hang Be';
            }
        }
    }

    toggleTheme() {
        const body = document.body;
        const isDark = body.classList.toggle('dark-theme');
        const themeBtn = document.getElementById('themeToggleBtn');
        if (themeBtn) {
            themeBtn.innerHTML = isDark ? '‚òÄÔ∏è Vil√°gos' : 'üåô S√∂t√©t';
        }
        localStorage.setItem('perfectcircle_theme', isDark ? 'dark' : 'light');
    }

    loadTheme() {
        const savedTheme = localStorage.getItem('perfectcircle_theme');
        if (savedTheme === 'dark') {
            document.body.classList.add('dark-theme');
            const themeBtn = document.getElementById('themeToggleBtn');
            if (themeBtn) {
                themeBtn.innerHTML = '‚òÄÔ∏è Vil√°gos';
            }
        }
    }

    showAdvancedFeatures() {
        const features = `‚öôÔ∏è FEJLETT FUNKCI√ìK

üéÆ BILLENTY≈∞ PARANCSOK:
‚Ä¢ Ctrl+S: Rajzol√°s kezd√©se
‚Ä¢ Ctrl+R: T√∂rl√©s
‚Ä¢ Ctrl+H: Seg√≠ts√©g
‚Ä¢ Esc: J√°t√©k megszak√≠t√°sa

üìä ADATKEZEL√âS:
‚Ä¢ Helyi eredm√©nyek export√°l√°sa/import√°l√°sa
‚Ä¢ T√©ma v√°lt√°s
‚Ä¢ Hang be/ki kapcsol√°sa

Szeretn√©d haszn√°lni ezeket a funkci√≥kat?`;

        if (confirm(features)) {
            this.showAdvancedMenu();
        }
    }

    showAdvancedMenu() {
        const action = prompt(`V√°lassz egy m≈±veletet:

1 - Eredm√©nyek export√°l√°sa
2 - Eredm√©nyek import√°l√°sa  
3 - Helyi adatok t√∂rl√©se
4 - Konzol megnyit√°sa

Add meg a sz√°m:`);

        switch(action) {
            case '1':
                this.exportScores();
                break;
            case '2':
                this.importScores();
                break;
            case '3':
                this.clearAllData();
                break;
            case '4':
                alert('Nyomd meg F12-t a fejleszt≈ëi konzol megnyit√°s√°hoz!');
                break;
        }
    }

    exportScores() {
        try {
            if (!window.ScoreManager) {
                alert('ScoreManager nem el√©rhet≈ë!');
                return;
            }
            const data = window.ScoreManager.exportScores();
            const blob = new Blob([data], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `perfect-circle-results-${new Date().toLocaleDateString('hu-HU')}.json`;
            a.click();
            URL.revokeObjectURL(url);
            alert('Eredm√©nyek sikeresen export√°lva!');
        } catch (error) {
            alert('Hiba az export√°l√°s sor√°n: ' + error.message);
        }
    }

    clearAllData() {
        if (confirm('Biztosan t√∂r√∂lni szeretn√©d az √∂sszes adatot?')) {
            try {
                if (window.ScoreManager) window.ScoreManager.clearScores();
                localStorage.removeItem('perfectcircle_playername');
                localStorage.removeItem('perfectcircle_theme');
                this.updateStats();
                alert('Minden adat t√∂r√∂lve!');
            } catch (error) {
                alert('Hiba a t√∂rl√©s sor√°n: ' + error.message);
            }
        }
    }

    loadPlayerName() {
        const savedName = localStorage.getItem('perfectcircle_playername');
        if (savedName) {
            const nameInput = document.getElementById('playerName');
            if (nameInput) {
                nameInput.value = savedName;
            }
            this.playerName = savedName;
        }
    }

    savePlayerName() {
        const nameInput = document.getElementById('playerName');
        const name = nameInput ? nameInput.value.trim() : '';

        if (name.length === 0) {
            alert('K√©rlek add meg a neved!');
            return false;
        }

        if (name.length > 20) {
            alert('A n√©v maximum 20 karakter lehet!');
            return false;
        }

        localStorage.setItem('perfectcircle_playername', name);
        this.playerName = name;
        alert(`N√©v mentve: ${name} ‚úÖ`);
        return true;
    }

    getPlayerName() {
        const nameInput = document.getElementById('playerName');
        const name = nameInput ? nameInput.value.trim() : '';
        return name || this.playerName || this.t('player.anonymous') || 'N√©vtelen';
    }

    updateStats() {
        if (!window.ScoreManager) {
            console.warn('‚ö†Ô∏è ScoreManager nem el√©rhet≈ë');
            return;
        }

        const stats = window.ScoreManager.getStats();
        const elements = {
            bestScore: document.getElementById('bestScore'),
            averageScore: document.getElementById('averageScore'),
            gamesPlayed: document.getElementById('gamesPlayed'),
            currentScore: document.getElementById('currentScore')
        };

        if (elements.bestScore) elements.bestScore.textContent = stats.best;
        if (elements.averageScore) elements.averageScore.textContent = stats.average;
        if (elements.gamesPlayed) elements.gamesPlayed.textContent = stats.games;
        if (elements.currentScore && stats.games === 0) elements.currentScore.textContent = '0';
    }

    showInstructions() {
        const instructions = `üéØ PERFECT CIRCLE - √öTMUTAT√ì

üìù J√ÅT√âK C√âLJA:
Rajzolj a lehet≈ë legt√∂k√©letesebb k√∂rt egyetlen mozdulattal!

üéÆ IR√ÅNY√çT√ÅS:
‚Ä¢ üñ±Ô∏è Eg√©r: Kattints √©s h√∫zd
‚Ä¢ üì± Mobil: √ârintsd √©s h√∫zd
‚Ä¢ ‚å®Ô∏è Billenty≈±k: Ctrl+S (start), Ctrl+R (t√∂rl√©s), Esc (stop)

üèÜ PONTOZ√ÅS:
‚Ä¢ K√∂ralak (40 pont): Mennyire hasonl√≠t k√∂rre
‚Ä¢ Z√°r√≥d√°s (20 pont): Mennyire z√°rt a forma
‚Ä¢ Egyenletess√©g (25 pont): Mennyire egyenletes a vonal
‚Ä¢ M√©ret (15 pont): Optim√°lis m√©ret a canvas-en

Sok sikert a t√∂k√©letes k√∂r rajzol√°s√°hoz! üçÄ‚ú®`;
        alert(instructions);
    }

    initializeFallback() {
        console.log('üîÑ Fallback inicializ√°l√°s...');
        try {
            this.currentLanguage = 'hu';
            this.loadPlayerName();
            this.updateStats();
            this.setupEventListeners();
            this.initializeUI();
            this.loadTheme();
            this.initialized = true;
            console.log('‚úÖ Fallback inicializ√°l√°s sikeres');
        } catch (error) {
            console.error('‚ùå Fallback inicializ√°l√°s is sikertelen:', error);
        }
    }

    // ‚úÖ LEADERBOARD INTEGR√ÅCI√ìS MET√ìDUSOK
    switchLeaderboard(type) {
        console.log(`üîÑ switchLeaderboard: ${type}`);
        
        if (this.leaderboardManager && typeof this.leaderboardManager.switchLeaderboard === 'function') {
            this.leaderboardManager.switchLeaderboard(type);
        } else {
            console.warn('‚ö†Ô∏è LeaderboardManager switchLeaderboard nem el√©rhet≈ë');
            this.handleLeaderboardSwitch(type);
        }
    }

    handleLeaderboardSwitch(type) {
        console.log(`üîÑ Fallback leaderboard v√°lt√°s: ${type}`);
        
        // Tab gombok friss√≠t√©se
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        const targetTab = document.getElementById(type + 'Tab');
        if (targetTab) {
            targetTab.classList.add('active');
        }
        
        if (type === 'local') {
            this.displayFallbackLeaderboard();
        } else if (type === 'global') {
            this.displayGlobalNotAvailable();
        }
    }

    displayGlobalNotAvailable() {
        const listContainer = document.getElementById('leaderboardList');
        const statusContainer = document.getElementById('leaderboardStatus');
        
        if (statusContainer) {
            statusContainer.textContent = '‚ùå Glob√°lis eredm√©nyek nem el√©rhet≈ëk';
        }
        
        if (listContainer) {
            listContainer.innerHTML = `
                <div class="score-entry error">
                    <span style="color: #ff6b6b;">‚ùå Glob√°lis eredm√©nyek nem el√©rhet≈ëk</span>
                </div>
            `;
        }
    }

    loadLocalLeaderboard(highlightId = null) {
        if (this.leaderboardManager && typeof this.leaderboardManager.loadLocalLeaderboard === 'function') {
            this.leaderboardManager.loadLocalLeaderboard(highlightId);
        } else {
            console.warn('‚ö†Ô∏è LeaderboardManager loadLocalLeaderboard nem el√©rhet≈ë');
            this.displayFallbackLeaderboard();
        }
    }

    async loadGlobalLeaderboard() {
        if (this.leaderboardManager && typeof this.leaderboardManager.loadGlobalLeaderboard === 'function') {
            await this.leaderboardManager.loadGlobalLeaderboard();
        } else {
            console.warn('‚ö†Ô∏è LeaderboardManager loadGlobalLeaderboard nem el√©rhet≈ë');
            this.displayGlobalNotAvailable();
        }
    }
}

// Glob√°lis alkalmaz√°s p√©ld√°ny
window.perfectCircleApp = new PerfectCircleApp();

// ‚úÖ GLOB√ÅLIS F√úGGV√âNYEK - MEGL√âV≈ê LEADERBOARD MANAGER-REL KOMPATIBILIS
window.savePlayerName = () => {
    if (window.perfectCircleApp) {
        return window.perfectCircleApp.savePlayerName();
    }
    return false;
};

window.getPlayerName = () => {
    if (window.perfectCircleApp) {
        return window.perfectCircleApp.getPlayerName();
    }
    return 'N√©vtelen';
};

window.showInstructions = () => {
    if (window.perfectCircleApp) {
        window.perfectCircleApp.showInstructions();
    }
};

window.updateStats = () => {
    if (window.perfectCircleApp) {
        window.perfectCircleApp.updateStats();
    }
};

// ‚úÖ LEADERBOARD KAPCSOL√ì F√úGGV√âNYEK
window.switchLeaderboard = (type) => {
    console.log(`üîÑ Glob√°lis switchLeaderboard h√≠v√°s: ${type}`);
    
    if (window.perfectCircleApp) {
        window.perfectCircleApp.switchLeaderboard(type);
    } else {
        console.error('‚ùå PerfectCircleApp nem el√©rhet≈ë');
    }
};

window.loadGlobalLeaderboard = async () => {
    console.log('üåç Glob√°lis loadGlobalLeaderboard h√≠v√°s');
    
    if (window.perfectCircleApp) {
        await window.perfectCircleApp.loadGlobalLeaderboard();
    } else {
        console.error('‚ùå PerfectCircleApp nem el√©rhet≈ë');
    }
};

window.loadLocalLeaderboard = (highlightId = null) => {
    console.log('üì± Glob√°lis loadLocalLeaderboard h√≠v√°s');
    
    if (window.perfectCircleApp) {
        window.perfectCircleApp.loadLocalLeaderboard(highlightId);
    } else {
        console.error('‚ùå PerfectCircleApp nem el√©rhet≈ë');
    }
};

// ‚úÖ JAV√çTOTT SHOWSCORE F√úGGV√âNY - MEGL√âV≈ê LEADERBOARD MANAGER INTEGR√ÅCI√ìVAL
window.showScore = async (score, analysis, transformationName = '') => {
    console.log('üìä showScore h√≠vva:', { score, analysis, transformationName });

    // UI friss√≠t√©s (v√°ltozatlan)
    const elements = {
        scoreDisplay: document.getElementById('scoreDisplay'),
        currentScore: document.getElementById('currentScore'),
        finalScore: document.getElementById('finalScore'),
        scoreTitle: document.getElementById('scoreTitle'),
        scoreBreakdown: document.getElementById('scoreBreakdown'),
        idealCircleContainer: document.getElementById('idealCircleContainer')
    };

    if (elements.scoreDisplay) {
        elements.scoreDisplay.style.display = 'block';
    }

    const roundedScore = Math.round(score);

    if (elements.currentScore) elements.currentScore.textContent = roundedScore;
    if (elements.finalScore) elements.finalScore.textContent = roundedScore;

    // Score c√≠m √©s breakdown (v√°ltozatlan)
    if (elements.scoreTitle) {
        let titleEmoji = roundedScore >= 90 ? 'üèÜ' : 
                        roundedScore >= 75 ? 'üåü' : 
                        roundedScore >= 60 ? 'üëç' : 
                        roundedScore >= 40 ? 'üëå' : 'üí™';
        
        let titleText = roundedScore >= 90 ? 'T√∂k√©letes! Zseni√°lis!' :
                       roundedScore >= 75 ? 'Kiv√°l√≥! Nagyon j√≥!' :
                       roundedScore >= 60 ? 'J√≥ munka!' :
                       roundedScore >= 40 ? 'Nem rossz!' : 'Pr√≥b√°ld √∫jra!';

        elements.scoreTitle.innerHTML = `<span style="font-size: 1.2em;">${titleEmoji}</span> ${titleText}`;
    }

    // MENT√âSI FOLYAMAT - MEGL√âV≈ê LEADERBOARD MANAGER-REL
    if (!analysis.error && roundedScore > 0) {
        setTimeout(async () => {
            console.log('üíæ Ment√©si folyamat kezd√©se...');
            
            // ‚úÖ 1. HELYI MENT√âS
            let savedScore = null;
            if (window.ScoreManager) {
                console.log('üíæ Helyi ment√©s...');
                savedScore = window.ScoreManager.saveScore(
                    roundedScore, 
                    analysis,
                    window.gameEngine ? window.gameEngine.getDifficulty() : 'easy',
                    transformationName
                );
                console.log('‚úÖ Helyi ment√©s eredm√©nye:', savedScore);
            }

            // Statisztik√°k friss√≠t√©se
            if (window.perfectCircleApp) {
                window.perfectCircleApp.updateStats();
            }

            // ‚úÖ 2. GLOB√ÅLIS MENT√âS - MEGL√âV≈ê LEADERBOARD MANAGER HASZN√ÅLATA
            const app = window.perfectCircleApp;
            const playerName = app ? app.getPlayerName() : 'N√©vtelen';
            const anonymousName = app ? app.t('player.anonymous') : 'N√©vtelen';

            const hasValidPlayerName = playerName && 
                                      playerName.trim() !== '' && 
                                      playerName !== anonymousName && 
                                      playerName !== 'N√©vtelen';

            if (hasValidPlayerName) {
                console.log('üë§ ‚úÖ √ârv√©nyes j√°t√©kos n√©v megvan');
                
                // MEGL√âV≈ê LEADERBOARD MANAGER HASZN√ÅLATA
                if (app && app.leaderboardManager) {
                    try {
                        const difficulty = window.gameEngine ? window.gameEngine.getDifficulty() : 'easy';
                        
                        // Ha van saveGlobalScore met√≥dus
                        if (typeof app.leaderboardManager.saveGlobalScore === 'function') {
                            console.log('üì§ Megl√©v≈ë LeaderboardManager glob√°lis ment√©s...');
                            await app.leaderboardManager.saveGlobalScore(
                                playerName,
                                roundedScore,
                                difficulty,
                                transformationName
                            );
                            console.log('‚úÖ Glob√°lis ment√©s sikeres!');
                        } 
                        // Vagy ha van submitScore met√≥dus
                        else if (typeof app.leaderboardManager.submitScore === 'function') {
                            console.log('üì§ Megl√©v≈ë LeaderboardManager submitScore...');
                            await app.leaderboardManager.submitScore(
                                playerName,
                                roundedScore,
                                difficulty,
                                transformationName
                            );
                            console.log('‚úÖ Score submit sikeres!');
                        }
                        else {
                            console.log('‚ö†Ô∏è Nincs glob√°lis ment√©si met√≥dus a megl√©v≈ë LeaderboardManager-ben');
                        }
                        
                    } catch (error) {
                        console.error('‚ùå Megl√©v≈ë LeaderboardManager glob√°lis ment√©s hiba:', error);
                    }
                } else {
                    console.log('‚ö†Ô∏è Nincs el√©rhet≈ë LeaderboardManager');
                }
            }

            // ‚úÖ 3. HELYI LEADERBOARD FRISS√çT√âSE
            console.log('üîÑ Helyi leaderboard friss√≠t√©se...');
            setTimeout(() => {
                if (app && app.leaderboardManager) {
                    const currentView = app.leaderboardManager.getCurrentView ? 
                                       app.leaderboardManager.getCurrentView() : 'local';
                    if (currentView === 'local') {
                        if (typeof app.leaderboardManager.loadLocalLeaderboard === 'function') {
                            app.leaderboardManager.loadLocalLeaderboard(savedScore?.id);
                        } else if (typeof app.leaderboardManager.refreshLocalLeaderboard === 'function') {
                            app.leaderboardManager.refreshLocalLeaderboard();
                        }
                    }
                } else {
                    app?.displayFallbackLeaderboard();
                }
            }, 100);

            console.log('‚úÖ Ment√©si folyamat befejezve');
        }, 500);
    }

    console.log('‚úÖ showScore befejezve');
};

// Biztons√°gos inicializ√°l√°s
let initAttempts = 0;
const maxInitAttempts = 5;

function safeInit() {
    initAttempts++;

    if (document.readyState === 'loading') {
        setTimeout(safeInit, 100);
        return;
    }

    if (!window.perfectCircleApp) {
        if (initAttempts < maxInitAttempts) {
            console.log(`üîÑ App inicializ√°l√°si k√≠s√©rlet ${initAttempts}/${maxInitAttempts}...`);
            setTimeout(safeInit, 200);
            return;
        } else {
            console.error('‚ùå App inicializ√°l√°s sikertelen');
            return;
        }
    }

    try {
        window.perfectCircleApp.init();
    } catch (error) {
        console.error('‚ùå App inicializ√°l√°si hiba:', error);
        if (initAttempts < maxInitAttempts) {
            setTimeout(safeInit, 500);
        }
    }
}

// Alkalmaz√°s ind√≠t√°sa
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', safeInit);
} else {
    safeInit();
}

// Hibakeres√©si f√ºggv√©ny
window.debugLeaderboard = () => {
    console.log('üîç Leaderboard hibakeres√©s:');
    console.log('- perfectCircleApp:', !!window.perfectCircleApp);
    console.log('- leaderboardManager:', !!window.perfectCircleApp?.leaderboardManager);
    console.log('- Megl√©v≈ë LeaderboardManager oszt√°ly:', !!window.LeaderboardManager);
    console.log('- Megl√©v≈ë leaderboardManager p√©ld√°ny:', !!window.leaderboardManager);
    console.log('- switchLeaderboard f√ºggv√©ny:', typeof window.switchLeaderboard);
    
    if (window.perfectCircleApp?.leaderboardManager) {
        const lm = window.perfectCircleApp.leaderboardManager;
        console.log('- LeaderboardManager met√≥dusok:');
        console.log('  - switchLeaderboard:', typeof lm.switchLeaderboard);
        console.log('  - loadLocalLeaderboard:', typeof lm.loadLocalLeaderboard);
        console.log('  - loadGlobalLeaderboard:', typeof lm.loadGlobalLeaderboard);
        console.log('  - saveGlobalScore:', typeof lm.saveGlobalScore);
        console.log('  - submitScore:', typeof lm.submitScore);
        console.log('  - getCurrentView:', typeof lm.getCurrentView);
    }
};

console.log('‚úÖ App.js integr√°ci√≥s verzi√≥ bet√∂ltve');
